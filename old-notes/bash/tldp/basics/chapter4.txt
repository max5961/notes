Chapter 4 - Introductin to Variables and Parameters
https://tldp.org/LDP/abs/html/variables.html
-------------------------------------------------------------------------------

- variable substitution is retrieving the value of a variable
- to declare a variable no whitespace is permitted on either side of the equal
operator
- variables are declared without the $ prefix
- after a variable is declared it appears with the $ prefix
- undeclared variables have a "null" alue --no assigned value (not zero!)

    # declaring and using a variable
    # SIMPLE
    a=879
    echo "The value of a is $a"

    # COMMAND SUBSTITUTION USING BACKTICKS
    word=`echo hello!` # assigns the result of echo command to "word"

    # COMMAND SUBSTITUTION USING $()
    # this is a newer method than backticks
    arch=$(uname -m)

### Bash variables are untyped
(https://tldp.org/LDP/abs/html/untyped.html)
    - bash variables are character strings, but permits arithmetic operations
    and comparisons on variables
    - the determining factor of whether or not an arithmetic operation or
    comparison can be performed on a variable is if the variable contains only
    digits

    a=1234  # integer
    let "a += 1"
    # a is still an integer

    b=BB34
    let "b += 1"
    echo $b  # echoes 1

### Special Variable Types
(https://tldp.org/LDP/abs/html/othertypesv.html)
    - local variables
        - variables visible only within a code block or function
    - environment variables
        - variables that affect the behavior of the shell and user interface
        - each process has an "environment", or "group of variables" that the
        process may reference
        - every time a shell starts it creates shell variables that correspond
        to its own environment variables
        - updating or adding new environment variables causes the shell to
        update its environment, and all of shell's child processes (the commands
        it executes) inherit this environment
        - environments have limited space
        - creating too many environmental variables or ones that use too much
        space may cause problems

    - exporting environment variables
        - if a script sets environment variables, they need to be "exported"
        - the "export" command exports environment variables

    - positional parameters
        - arguments passed to the script from the command line $0, $1, $2, $3
        - $0 is the name of the script itself, $1 is the first actual argument
        - after $9, the arguments must be enclosed in brackets ${10}, ${11}
        - the special variables $* and $@ denote all the positional parameters
        - "$#" represents the number of arguments passed to the script































































